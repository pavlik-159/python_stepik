1. Tag – элемент или тег

Начало и конец элементов обрамляются специальными словами – тегами (tag).
Задача тегов – обозначить, какой именно тип информации на странице они представляют
(картинка, текст, блок, ссылка и так далее). Например:

<p>Здесь написан текст.</p>



2. Attribute – атрибуты или свойства элемента

Элементам можно задавать различные стандартные свойства, а также создавать собственные свойства или атрибуты. Атрибуты обычно имеют вид: имя="значение". Иногда знак "=" и значение могут быть опущены или значение может быть пустой строкой: имя="".

В примере ниже помимо тегов и текста добавлен еще атрибут href, который задаёт ссылку для тега <a>, на которую будет вести текст внутри тега.

<a href="/about">Посмотреть подробнее</a>

Атрибут class

В третьем примере появляется еще один важный атрибут – класс (class). Элементу задано два класса: simple-text и main. Классы чаще всего используют для задания правил вёрстки с помощью CSS:

<div class="simple-text main">Здесь написан текст.</div>

Атрибут name

Свойство name, например, используется для задания якоря (закладки) в html-странице. Этот атрибут тоже можно использовать в качестве селектора для поиска элемента:

  <a name="top"></a>
  <p>Длинный текст</p>
  ...
  <p><a href="#top">Наверх</a></p>

Атрибут id

В этом примере появился еще атрибут id – уникальный указатель на элемент. Значение id в общем случае не должно повторяться в пределах страницы:

<button id="save_button">Сохранить</button>

!Важно. В современных JavaScript-фреймворках id-атрибуты чаще всего генерируются динамически самим фреймворком, поэтому они изменяются каждый раз при перезагрузке страницы и совершенно нечитабельны, например: вы увидите что-то вроде id="u_ps_0_0_n" или id="avadspffd". В таких случаях вам придется пользоваться другими селекторами или использовать собственные data-атрибуты, о которых мы расскажем далее. Названия классов также могут генерироваться автоматически. Поэтому предлагаем вам простое правило: если увидите нечеловекочитаемое значение атрибута или если значение атрибута меняется при перезагрузке страницы, то не используйте его. В наших примерах мы используем статические страницы, поэтому вы смело можете использовать описанные здесь CSS-селекторы.
3. Иерархия в HTML-документах

HTML-документ часто сравнивают с моделью семейного древа, в котором есть родители, дети, братья, предки и потомки. Такое сравнение допустимо благодаря возможности вкладывать одни элементы в другие. Вложенные (дочерние) элементы могут, в свою очередь, содержать свои дочерние элементы, следовательно, глубина вложения элементов может быть любой.

Давайте разберёмся с терминологией данного древа:

    потомок элемента X – элемент любой степени вложенности внутри элемента X;
    ребёнок или дочерний элемент — прямой потомок (т.е. элемент на первом уровне вложенности);
    предок элемента Y – любой элемент X, который включает в себя элемент Y;
    родитель — это прямой предок (т.е. элемент, который расположен выше строго на 1 уровень);
    братский или соседний элемент – элемент X, который расположен на одном уровне иерархии с элементом Y.
    Элементы X и Y имеют одного родителя.
